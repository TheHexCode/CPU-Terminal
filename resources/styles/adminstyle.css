h1
{
    text-decoration: underline;
}

#dashHeader
{
    display: flex;
    flex-direction: column;
    row-gap: 2rem;
    width: fit-content;

}

#dashCodes
{
    display: flex;
    flex-direction: row;
    column-gap: 2rem;
}

.dashCodeBox
{
    display: flex;
    flex-direction: column;
    align-items: center;
    border: 1px solid black;
    padding: 0 2rem 1rem 2rem;
}

.dashCode
{
    font-size: 200%;
}

.editContainer
{
    display: flex;
    flex-direction: row;
}

.editBox
{
    display: flex;
    flex-direction: column;
    align-items: center;
}

#termList
{
    align-self: flex-start;
    padding-left: 5rem;
    margin: 0;
}

#termHeader
{
    display: flex;
    flex-direction: row;
    column-gap: 10rem;
}

#termControls
{
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    column-gap: 2rem;
}

.safeZone
{
    padding: 2rem;
    background: green;
    text-align: center;
    align-content: center;
}

.dangerZone
{
    padding: 2rem;
    border: 1px solid rgb(255,0,0);
	background: repeating-linear-gradient(
		-45deg,
		rgb(255,0,0) 0 0.75rem,
		rgb(255,255,255) 0.75rem 1.5rem
	);
    text-align: center;
    align-content: center;
}

.entryList
{
    width: max-content;
}


.iceBox
{
    display: flex;
    flex-direction: column;
    background-color: rgba(100,200,255,0.2);
    border: 1px solid black;
    margin-left: 1rem;
    padding: 0 1rem 1rem 0;
}

.entry,
.puzzle
{
    display: flex;
    flex-direction: row;
    align-items: center;
    column-gap: 1rem;
    border: 1px solid black;
    padding: 1rem;
    margin-left: 1rem;
    width: auto;
}

.iceBox .entry:first-of-type
{
    margin-left: 0;
    border: none;
}

.entryControls
{
    display: grid;
    grid-template-columns: min-content min-content min-content;
    grid-template-rows: [top] min-content [mid-start] min-content [mid-end] min-content [bottom];
    column-gap: 0.25rem;
    row-gap: 0.25rem;
}

.upControls
{
    grid-column: 1;
    grid-row: top / mid-end;
    display: grid;
    grid-template-rows: subgrid;
}

.delButton
{
    grid-column: 2;
    grid-row: mid-start / mid-end;
}

.downControls
{
    grid-column: 3;
    grid-row: mid-start / bottom;
    display: grid;
    grid-template-rows: subgrid;
}

.entryGrid
{
    display: grid;
    grid-template-rows: min-content 1rem min-content min-content;
    grid-auto-rows: min-content;
    grid-template-columns: [access] min-content [modify] min-content [title] 1fr [reqButton] min-content [contents] 1fr [buttons] min-content [end];
    column-gap: 0.25rem;
}

.entryTypeRow
{
    grid-row: 1;
    grid-column: access / buttons;
    display: grid;
    grid-template-columns: subgrid;
}

.entryLabelRow
{
    grid-row: 3;
    grid-column: access / end;
    display: grid;
    grid-template-columns: subgrid;
}

.entryInputRow
{
    grid-row: 4;
    grid-column: access / end;
    display: grid;
    grid-template-columns: subgrid;
}

.entryLabel
{
    text-align: center;
}

.entryTypeLabel
{
    grid-column: access / modify;
    text-align: center;
    align-self: center;
}

.entryType
{
    grid-column: modify / title;
}

.entryStateLabel
{
    grid-column: title / contents;
    text-align: center;
    align-self: center;
}

.entryState
{
    grid-column: contents / buttons;
}

/*
.entryID
{
    grid-column: id / access;
}
*/

.entryAccess
{
    grid-column: access / modify;
}

.entryModify
{
    grid-column: modify / title;
}

.puzzleRepeat
{
    grid-column: modify / title;
    display: flex;
    justify-content: space-around;
}

.entryTitle
{
    grid-column: title / contents;
}

.puzzleTitle
{
    grid-column: title / reqButton;
}

.entryContents,
.entryReward
{
    grid-column: contents / buttons;
}

.delEntryButton,
.delPuzzleButton
{
    background-color: red;
    color: white;
}

.delEffectButton,
.addEffectButton,
.addPuzzleReward,
.delPuzzleReward
{
    grid-column: buttons / end;
}

.delPuzzleReq,
.addPuzzleReq
{
    grid-column: reqButton / contents;
}

.addEntryButton,
.addPuzzleButton
{
    margin: 1rem;
}

.iceBox .addEntryButton
{
    margin: 1rem 0 0 1rem;
}